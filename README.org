#+TITLE: Project: Train

* Getting started

** Fork the repository from Gitlab

By connecting to gitlab.isima.fr, you can use the project's "Fork" button to make a copy of it on your account and thus push it.

** Configure your workspace

You need a Java development tool, but above all access to a postgresql server. Two choices are available to you:

1. program and install posgresql on your personal machine
2. program and install postgresql on your virtual machine (the one named vm-etu-votre_login.local.isima.fr)
** Configuring Postgresql

To develop, you will need to open a connection with a postgres server, which will be installed on your student virtual machine (the one named vm-etu-votre_login.local.isima.fr).

*** Installing postgresql

#+BEGIN_src bash
sudo apt install postgresql
#+END_src

*** Check that TCP/IP connections with password are allowed

The JDBC API (Java Database Connectivity) is an essential tool for interacting with a SGDB from Java. This API opens a connection with the Postgres server via the TCP/IP protocol on the default port 5432. For security reasons such connections are not always possible by default. We want to connect with a user and a password (which we will create shortly after) using either the ~md5~ or ~scram-sha-256~ authentication method.

Edit the configuration file ~pg_hda.conf~ (on Debian in the folder ~/etc/postgresql/<version>/main~, also exists on Windows: ~C:\Program Files\PostgreSQL\<version>\data\postgresql .conf~) and modify two lines as follows, checking that the last column has the value ~md5~ or ~scram-sha-256~:

#+BEGIN_src
# IPv4 local connections:
host all all 127.0.0.1/32 scram-sha-256
# IPv6 local connections:
host all all ::1/128 scram-sha-256
#+END_src

In case of repeated errors, you can accept all connections without checking the password by replacing ~scram-sha-256~ with ~trust~.

Restart the Postgres server after each configuration file modification with:
#+BEGIN_src sql
sudo systemctl restart postgresql
#+END_src

More information here:
- [[https://www.postgresql.org/docs/current/auth-pg-hba-conf.html]]
- [[https://www.postgresql.org/docs/current/auth-password.html]]

*** Configure your user and database

Connect to the postgres server via the ~psql~ client:
#+BEGIN_src bash
   sudo -u postgres psql
#+END_src

Create your user ~username~ with a user of your choice with the password of your choice:
#+BEGIN_src sql
CREATE USER username WITH PASSWORD 'a simple password';
#+END_src

Create the database that you will use during the project:
#+BEGIN_src sql
CREATE DATABASE train;
#+END_src

Declare your user as owner of the database:
#+BEGIN_src sql
ALTER DATABASE train OWNER TO username;
#+END_src

Grant all rights to your user based on this:
#+BEGIN_src sql
GRANT ALL PRIVILEGES ON DATABASE train TO username;
#+END_src

Exit the ~psql~ client with the ~\q~ command. And log out of the postgres login from bash.

Test the connection to your database with your new user via TCP/IP:
#+BEGIN_src bash
psql -U username -h localhost -d train -W
#+END_src

*** Useful commands in the psql client

Unlike the Oracle client, auto commit is enabled in psql, which means that:
- transactions must explicitly begin with the keyword ~BEGIN~
- requests outside of transactions are automatically validated at the end of execution, if there are no errors.

- ~\q~ exit
- ~\dt~ list the tables of the current database
- ~\c other_base~ connect to another database

***Connecting to the VM via RDP

1. launch Remmina from the local machine
2. create a new connection profile
3. modify the *server* field with “vm-etu-login.local.isima.fr”
4. modify the *Username* field with "login"
5. click save and log in

*** Code from a local machine without Postgres (does not work in the info room)

You may experience difficulty coding from your virtual machine. It would be better to code from the local machine and test with the local machine's web browser. This is possible using SSH by forwarding the TCP/IP connection on port 5432 from the local machine to the Postgres server on the virtual machine:

#+BEGIN_src bash
ssh -L 5432:localhost:5432 login@vm-etu-login.local.isima.fr
#+END_src

***Sources
- https://www.bigbinary.com/blog/configure-postgresql-to-allow-remote-connection
- https://www.ibm.com/docs/fr/urbancode-deploy/6.2.2?topic=configuration-configuring-postgresql-database-blueprint-design-server


** First execution

        ***ConnectionPool

        Before running the code for the first time, you must configure access to the database. Go to the "com.uca.dao.ConnectionPool" class and modify the following values:

           - ~URL~ becomes "jdbc:postgresql://localhost/train"
           - ~USER~ becomes "user_name"
           - ~PASSWORD~ becomes "your_password"

          The ~ConnectionPool~ class manages the different connections opened by the Java server. An object [[https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html][Connection]] in java corresponds to a session, where several successive transactions can be created. When we want to create a transaction from Java, we request a connection to ~ConnectionPool~ via the ~getConnection~ method and once the transaction is finished, we must return it to ~ConnectionPool~ via ~releaseConnection~.

          *Note*: You still need to interact with the database by creating transactions. To do this, you must use the ~setAutoCommit~, ~commit~ and ~rollback~ methods of the object [[https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html ][Connection]]. Also don't forget to choose a transaction isolation level with the ~setTransactionIsolation~ method.

        *** Execution

        Start the Java server for the first time with the command (to be restarted after each code modification):
        #+BEGIN_src bash
        ./gradlew run
        #+END_src

        Go to http://localhost:8081/